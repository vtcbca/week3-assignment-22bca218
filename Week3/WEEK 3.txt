
      WEEK 3 ASSIGNMENT
   
   
 1.Write a python script to perform CRUD operation on following table of "ESM.db" database.

import sqlite3

# Connect to the database
connection = sqlite3.connect('ESM.db')
cursor = connection.cursor()

# CREATE TABLE if it doesn't exist
create_table_query = '''CREATE TABLE IF NOT EXISTS Employee (
                        eid INTEGER PRIMARY KEY,
                        ename TEXT,
                        dept TEXT,
                        basic REAL,
                        branch TEXT
                    )'''
cursor.execute(create_table_query)

# INSERT a record
insert_query = '''INSERT INTO Employee (eid, ename, dept, basic, branch)
                  VALUES (1, 'John Doe', 'Sales', 5000.00, 'New York')'''
cursor.execute(insert_query)

# SELECT all records
select_query = '''SELECT * FROM Employee'''
cursor.execute(select_query)
records = cursor.fetchall()
for record in records:
    print(record)

# UPDATE a record
update_query = '''UPDATE Employee SET basic = 6000.00 WHERE eid = 1'''
cursor.execute(update_query)

# SELECT a record after UPDATE
select_query = '''SELECT * FROM Employee WHERE eid = 1'''
cursor.execute(select_query)
updated_record = cursor.fetchone()
print("Updated Record:", updated_record)

# DELETE a record
delete_query = '''DELETE FROM Employee WHERE eid = 1'''
cursor.execute(delete_query)

# SELECT all records after DELETE
select_query = '''SELECT * FROM Employee'''
cursor.execute(select_query)
records = cursor.fetchall()
for record in records:
    print(record)

# Commit the changes and close the connection
connection.commit()
connection.close()

import sqlite3

# Connect to the database
connection = sqlite3.connect('ESM.db')

# Create a cursor object
cursor = connection.cursor()

# Perform database operations...

# Close the connection
connection.close()


2.Employee ( eid, ename, dept, basic, branch). eid must be primary key.

CREATE TABLE Employee (
  eid INT PRIMARY KEY,
  ename VARCHAR(50),
  dept VARCHAR(50),
  basic DECIMAL(10, 2),
  branch VARCHAR(50)
);


3.Department : Account, Inventory, IT, HR.

CREATE TABLE Department (
  dept_id INT PRIMARY KEY,
  name VARCHAR(50)
);

INSERT INTO Department (dept_id, name) VALUES
  (1, 'Account'),
  (2, 'Inventory'),
  (3, 'IT'),
  (4, 'HR');

INSERT INTO Department (name) VALUES ('Account');
INSERT INTO Department (name) VALUES ('Inventory');
INSERT INTO Department (name) VALUES ('IT');
INSERT INTO Department (name) VALUES ('HR');



           QUERY

3. Update records who are from "Surat" branch with increment in salary 10%.

# UPDATE records from "Surat" branch with a 10% salary increment
update_query = '''UPDATE Employee SET basic = basic * 1.1 WHERE branch = 'Surat' '''
cursor.execute(update_query)

# SELECT all records after the update
cursor.execute(select_query)
records = cursor.fetchall()
for record in records:
    print(record)

4. Print All records.

# SELECT all records
select_query = '''SELECT * FROM Employee'''
cursor.execute(select_query)
records = cursor.fetchall()
for record in records:
    print(record)


5. Print records where dept is "HR" and "IT".

# SELECT records where department is "HR" or "IT"
select_query = '''SELECT * FROM Employee WHERE dept = 'HR' OR dept = 'IT' '''
cursor.execute(select_query)
records = cursor.fetchall()
for record in records:
    print(record)


6.Print records in sorting order of department.

# SELECT records in sorting order of department
select_query = '''SELECT * FROM Employee ORDER BY dept'''
cursor.execute(select_query)
records = cursor.fetchall()
for record in records:
    print(record)



7. Print records where basic is >6000.

# SELECT records where basic salary is greater than 6000
select_query = '''SELECT * FROM Employee WHERE basic > 6000'''
cursor.execute(select_query)
records = cursor.fetchall()
for record in records:
    print(record)

8.Print records whrere employee name second character is "r".

# SELECT records where employee name's second character is "r"
select_query = '''SELECT * FROM Employee WHERE SUBSTR(ename, 2, 1) = 'r' '''
cursor.execute(select_query)
records = cursor.fetchall()
for record in records:
    print(record)

9.Grouping record of employee who are from "Account" and "Inventory".

# Group records of employees from "Account" and "Inventory"
select_query = '''SELECT dept, COUNT(*) FROM Employee WHERE dept IN ('Account', 'Inventory') GROUP BY dept'''
cursor.execute(select_query)
records = cursor.fetchall()
for record in records:
    print(record)
	
	
10. Print all records based on branch name in descending order.

# SELECT all records based on branch name in descending order
select_query = '''SELECT * FROM Employee ORDER BY branch DESC'''
cursor.execute(select_query)
records = cursor.fetchall()
for record in records:
    print(record)
















